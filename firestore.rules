/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a public-read, owner-write model for most content collections.
 *
 * Data Structure:
 * - Top-level collections: /pages/{pageId}, /categories/{categoryId}, /tags/{tagId}, /posts/{postId}, /media/{mediaId}, /widget_areas/{widgetAreaId}, /widget_instances/{widgetInstanceId}.
 * - Single config document: /site_settings/config.
 *
 * Key Security Decisions:
 * - Public read access for 'posts', 'pages', 'categories', and 'tags' collections.
 * - Owner-only writes for 'posts', 'pages', 'media' collections, enforced via the 'authorId' field.
 * - Site settings document at `/site_settings/config` is writeable by any signed-in user. This may need further access control in the future.
 * - Widget Areas and Widget Instances are globally writable by any signed-in user. This may need further access control in the future.
 * - No user listing is allowed (if a /users collection existed).
 *
 * Denormalization for Authorization:
 * - The 'authorId' field is used within 'pages', 'posts', and 'media' documents to simplify ownership checks. This avoids the need for complex queries or additional reads to determine the author.
 *
 * Structural Segregation:
 * - Publicly readable content (posts, pages, categories, tags) is stored in top-level collections, separate from any user-specific private data (none in this schema).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access and owner-only writes for pages.
     * @path /pages/{pageId}
     * @allow (get, list)
     * @allow (create) if request.auth.uid != null && request.resource.data.authorId == request.auth.uid
     * @allow (update, delete) if request.auth.uid != null && resource.data.authorId == request.auth.uid
     * @deny (create) if request.auth.uid == null
     * @deny (update, delete) if request.auth.uid == null
     * @deny (update) if resource.data.authorId != get(/databases/$(database)/documents/pages/$(pageId)).data.authorId
     * @principle Allows anyone to read pages, but only the author can create, update, or delete them.
     */
    match /pages/{pageId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows public read access for categories. No write access is granted in this prototyping phase.
     * @path /categories/{categoryId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows anyone to read categories, but no one to modify them (for now).
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access for tags. No write access is granted in this prototyping phase.
     * @path /tags/{tagId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Allows anyone to read tags, but no one to modify them (for now).
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access and owner-only writes for posts.
     * @path /posts/{postId}
     * @allow (get, list)
     * @allow (create) if request.auth.uid != null && request.resource.data.authorId == request.auth.uid
     * @allow (update, delete) if request.auth.uid != null && resource.data.authorId == request.auth.uid
     * @deny (create) if request.auth.uid == null
     * @deny (update, delete) if request.auth.uid == null
     * @deny (update) if resource.data.authorId != get(/databases/$(database)/documents/posts/$(postId)).data.authorId
     * @principle Allows anyone to read posts, but only the author can create, update, or delete them.
     */
    match /posts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows owner-only create, update, and delete for media.
     * @path /media/{mediaId}
     * @allow (get, list) if request.auth.uid != null && resource.data.authorId == request.auth.uid
     * @allow (create) if request.auth.uid != null && request.resource.data.authorId == request.auth.uid
     * @allow (update, delete) if request.auth.uid != null && resource.data.authorId == request.auth.uid
     * @deny (create, update, delete) if request.auth.uid == null
     * @deny (update) if resource.data.authorId != get(/databases/$(database)/documents/media/$(mediaId)).data.authorId
     * @principle Only the author can manage their own media.
     */
    match /media/{mediaId} {
      allow get, list: if isSignedIn() && resource.data.authorId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows any signed-in user to read/write site settings. This may need further access control.
     * @path /site_settings/config
     * @allow (get, list, create, update, delete) if request.auth != null
     * @principle In the prototype, any authenticated user can modify site-wide settings.
     */
    match /site_settings/config {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any signed-in user to read/write widget areas. This may need further access control.
     * @path /widget_areas/{widgetAreaId}
     */
    match /widget_areas/{widgetAreaId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows any signed-in user to read/write widget instances. This may need further access control.
     * @path /widget_instances/{widgetInstanceId}
     */
    match /widget_instances/{widgetInstanceId} {
      allow get, list, create, update, delete: if isSignedIn();
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
  }
}