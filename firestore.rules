/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict owner-based authorization model for a CMS.
 *
 * Data Structure:
 * - /pages/{pageId}: Stores static page data.
 * - /categories/{categoryId}: Stores category data.
 * - /tags/{tagId}: Stores tag data.
 * - /posts/{postId}: Stores post data.
 *
 * Key Security Decisions:
 * - All write operations (create, update, delete) on pages, categories, tags, and posts are restricted to the author of the content.
 * - Public read access is granted to all collections.
 *
 * Denormalization for Authorization:
 * - Each document in the 'pages', 'categories', 'tags', and 'posts' collections must contain an `authorId` field that matches the user's UID for write access.
 * - The rule for creating documents ensures that the `authorId` field matches the authenticated user's UID.
 * - The rules for updating and deleting documents ensure that the authenticated user's UID matches the existing `authorId` field in the document.
 *
 * Structural Segregation:
 * - The CMS uses top-level collections for 'pages', 'categories', 'tags', and 'posts' to keep data separate and manageable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the 'pages' collection.
     * @path /pages/{pageId}
     * @allow (get, list): Any user can read a page.
     * @allow (create): Only the authenticated user can create a page, with the 'authorId' field matching their UID.
     * @allow (update, delete): Only the author of the page can modify or delete it.
     * @deny create: if the 'authorId' field does not match the authenticated user's UID.
     * @deny update: if the 'authorId' field is changed.
     * @deny delete: if the user is not the author of the page.
     * @principle Enforces document ownership for writes.
     */
    match /pages/{pageId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Controls access to the 'categories' collection.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read a category.
     * @allow (create): Only the authenticated user can create a category, with the 'authorId' field matching their UID.
     * @allow (update, delete): Only the author of the category can modify or delete it.
     * @deny create: if the 'authorId' field does not match the authenticated user's UID.
     * @deny update: if the 'authorId' field is changed.
     * @deny delete: if the user is not the author of the category.
     * @principle Enforces document ownership for writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Controls access to the 'tags' collection.
     * @path /tags/{tagId}
     * @allow (get, list): Any user can read a tag.
     * @allow (create): Only the authenticated user can create a tag, with the 'authorId' field matching their UID.
     * @allow (update, delete): Only the author of the tag can modify or delete it.
     * @deny create: if the 'authorId' field does not match the authenticated user's UID.
     * @deny update: if the 'authorId' field is changed.
     * @deny delete: if the user is not the author of the tag.
     * @principle Enforces document ownership for writes.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Controls access to the 'posts' collection.
     * @path /posts/{postId}
     * @allow (get, list): Any user can read a post.
     * @allow (create): Only the authenticated user can create a post, with the 'authorId' field matching their UID.
     * @allow (update, delete): Only the author of the post can modify or delete it.
     * @deny create: if the 'authorId' field does not match the authenticated user's UID.
     * @deny update: if the 'authorId' field is changed.
     * @deny delete: if the user is not the author of the post.
     * @principle Enforces document ownership for writes.
     */
    match /posts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    // --- Helper functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}