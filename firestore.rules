/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a public-read, owner-write model for most content collections,
 * with specific authorization checks for critical operations.  The SiteSettings collection
 * is write-protected.
 *
 * Data Structure:
 * - Top-level collections: /pages/{pageId}, /categories/{categoryId}, /tags/{tagId}, /posts/{postId}, /media/{mediaId}, /widget_areas/{widgetAreaId}, /widget_instances/{widgetInstanceId}.
 * - Single document: /site_settings/config
 *
 * Key Security Decisions:
 * - Public Read: Most content collections (pages, categories, tags, posts, media) are readable by anyone.
 * - Owner-Only Writes: Create, update, and delete operations on content collections are restricted to the owner (author) of the content.  The owner is identified by an `authorId` field in the document.
 * - Site Settings Restriction: The `site_settings/config` document is only writable by authenticated users, but should ideally be restricted to admins.
 * - No User Listing: User data is not directly exposed or listable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to pages and restricts write access to the author.
     * @path /pages/{pageId}
     * @allow (get, list): Any user can read page data.
     * @allow (create): User 'A' can create a page if `request.auth.uid` matches `request.resource.data.authorId`.
     * @allow (update, delete): User 'A' can update/delete the page if `request.auth.uid` matches the existing `resource.data.authorId`.
     * @deny (create): User 'B' cannot create a page with `authorId` set to User 'A's ID.
     * @deny (update, delete): User 'B' cannot update/delete a page created by User 'A'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /pages/{pageId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Grants public read access to categories and restricts write access to authenticated users.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category data.
     * @allow (create): Authenticated user can create a category.
     * @allow (update, delete): Authenticated user can update/delete a category.
     * @deny (create): Non-authenticated user cannot create a category.
     * @deny (update, delete): Non-authenticated user cannot update/delete a category.
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants public read access to tags and restricts write access to authenticated users.
     * @path /tags/{tagId}
     * @allow (get, list): Any user can read tag data.
     * @allow (create): Authenticated user can create a tag.
     * @allow (update, delete): Authenticated user can update/delete a tag.
     * @deny (create): Non-authenticated user cannot create a tag.
     * @deny (update, delete): Non-authenticated user cannot update/delete a tag.
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants public read access to posts and restricts write access to the author.
     * @path /posts/{postId}
     * @allow (get, list): Any user can read post data.
     * @allow (create): User 'A' can create a post if `request.auth.uid` matches `request.resource.data.authorId`.
     * @allow (update, delete): User 'A' can update/delete the post if `request.auth.uid` matches the existing `resource.data.authorId`.
     * @deny (create): User 'B' cannot create a post with `authorId` set to User 'A's ID.
     * @deny (update, delete): User 'B' cannot update/delete a post created by User 'A'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /posts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Grants public read access to media and restricts write access to the author.
     * @path /media/{mediaId}
     * @allow (get, list): Any user can read media data.
     * @allow (create): User 'A' can create media if `request.auth.uid` matches `request.resource.data.authorId`.
     * @allow (update, delete): User 'A' can update/delete the media if `request.auth.uid` matches the existing `resource.data.authorId`.
     * @deny (create): User 'B' cannot create media with `authorId` set to User 'A's ID.
     * @deny (update, delete): User 'B' cannot update/delete media created by User 'A'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /media/{mediaId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Restricts write access to site settings to authenticated users. Ideally, this should be further restricted to admin users.
     * @path /site_settings/config
     * @allow (get): Any user can read site settings.
     * @allow (create, update, delete): Authenticated user can create, update, or delete site settings.
     * @deny (create, update, delete): Non-authenticated user cannot create, update, or delete site settings.
     * @principle Restricts writes to authenticated users (should be admins).
     */
    match /site_settings/config {
      allow get: if true;
      allow create, update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants authenticated users write access to widget areas
     * @path /widget_areas/{widgetAreaId}
     * @allow (get, list): Any user can read widget area data.
     * @allow (create): Authenticated user can create a widget area.
     * @allow (update, delete): Authenticated user can update/delete a widget area.
     * @deny (create): Non-authenticated user cannot create a widget area.
     * @deny (update, delete): Non-authenticated user cannot update/delete a widget area.
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /widget_areas/{widgetAreaId} {
       allow get, list: if true;
       allow create: if isSignedIn();
       allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants authenticated users write access to widget instances
     * @path /widget_instances/{widgetInstanceId}
     * @allow (get, list): Any user can read widget instance data.
     * @allow (create): Authenticated user can create a widget instance.
     * @allow (update, delete): Authenticated user can update/delete a widget instance.
     * @deny (create): Non-authenticated user cannot create a widget instance.
     * @deny (update, delete): Non-authenticated user cannot update/delete a widget instance.
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /widget_instances/{widgetInstanceId} {
       allow get, list: if true;
       allow create: if isSignedIn();
       allow update, delete: if isSignedIn() && resource != null;
    }


    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}