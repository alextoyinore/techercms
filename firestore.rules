/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a flexible access control model, prioritizing ease of iteration and data management for a CMS.
 *
 * Data Structure:
 * - Top-level collections are used for Pages, Categories, Tags, Posts, Media, WidgetAreas, WidgetInstances, NavigationMenus, and NavigationMenuItems.
 * - The /site_settings/config document stores global site configuration.
 *
 * Key Security Decisions:
 * - Public read access is granted to all collections.
 * - Write access to collections requires authentication and validation of the authorId or ownerId field.
 * - The 'site_settings/config' document is write-protected, as there's currently no authorization model defined for it.
 * - Data shape is not strictly validated to allow for rapid prototyping. Validation is limited to essential fields like authorId and ownerId for authorization purposes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read access to all pages. Requires authentication for write access, and enforces author-based ownership for modifications.
     * @path /pages/{pageId}
     * @allow (get, list)
     * @allow (create) if request.auth != null && request.resource.data.authorId == request.auth.uid
     * @allow (update, delete) if request.auth != null && resource.data.authorId == request.auth.uid
     * @deny (create) if request.auth == null
     * @deny (update, delete) if request.auth == null
     * @principle Allows public reading, while restricting modifications to authenticated authors.
     */
    match /pages/{pageId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isOwner(resource.data.authorId);
    }

    /**
     * @description Allows read access to all categories. Requires authentication for write access.
     * @path /categories/{categoryId}
     * @allow (get, list)
     * @allow (create) if request.auth != null
     * @allow (update, delete) if request.auth != null
     * @deny (create) if request.auth == null
     * @deny (update, delete) if request.auth == null
     * @principle Allows public reading while restricting modifications to authenticated users.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows read access to all tags. Requires authentication for write access.
     * @path /tags/{tagId}
     * @allow (get, list)
     * @allow (create) if request.auth != null
     * @allow (update, delete) if request.auth != null
     * @deny (create) if request.auth == null
     * @deny (update, delete) if request.auth == null
     * @principle Allows public reading while restricting modifications to authenticated users.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows read access to all posts. Requires authentication for write access, and enforces author-based ownership for modifications.
     * @path /posts/{postId}
     * @allow (get, list)
     * @allow (create) if request.auth != null && request.resource.data.authorId == request.auth.uid
     * @allow (update, delete) if request.auth != null && resource.data.authorId == request.auth.uid
     * @deny (create) if request.auth == null
     * @deny (update, delete) if request.auth == null
     * @principle Allows public reading, while restricting modifications to authenticated authors.
     */
    match /posts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isOwner(resource.data.authorId);
    }

    /**
     * @description Allows read access to all media items. Requires authentication for write access, and enforces author-based ownership for modifications.
     * @path /media/{mediaId}
     * @allow (get, list)
     * @allow (create) if request.auth != null && request.resource.data.authorId == request.auth.uid
     * @allow (update, delete) if request.auth != null && resource.data.authorId == request.auth.uid
     * @deny (create) if request.auth == null
     * @deny (update, delete) if request.auth == null
     * @principle Allows public reading, while restricting modifications to authenticated authors.
     */
    match /media/{mediaId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isOwner(resource.data.authorId);
    }

    /**
     * @description Restricts all access to the site_settings document.
     * @path /site_settings/config
     * @deny (get, list, create, update, delete)
     * @principle No authorization is currently defined for site settings.
     */
    match /site_settings/config {
      allow get, list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read access to all widget areas. Requires authentication for write access.
     * @path /widget_areas/{widgetAreaId}
     * @allow (get, list)
     * @allow (create) if request.auth != null
     * @allow (update, delete) if request.auth != null
     * @deny (create) if request.auth == null
     * @deny (update, delete) if request.auth == null
     * @principle Allows public reading while restricting modifications to authenticated users.
     */
    match /widget_areas/{widgetAreaId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows read access to all widget instances. Requires authentication for write access.
     * @path /widget_instances/{widgetInstanceId}
     * @allow (get, list)
     * @allow (create) if request.auth != null
     * @allow (update, delete) if request.auth != null
     * @deny (create) if request.auth == null
     * @deny (update, delete) if request.auth == null
     * @principle Allows public reading while restricting modifications to authenticated users.
     */
    match /widget_instances/{widgetInstanceId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows read access to all navigation menus. Requires authentication for write access.
     * @path /navigation_menus/{menuId}
     * @allow (get, list)
     * @allow (create) if request.auth != null
     * @allow (update, delete) if request.auth != null
     * @deny (create) if request.auth == null
     * @deny (update, delete) if request.auth == null
     * @principle Allows public reading while restricting modifications to authenticated users.
     */
    match /navigation_menus/{menuId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows read access to all navigation menu items. Requires authentication for write access.
     * @path /navigation_menu_items/{itemId}
     * @allow (get, list)
     * @allow (create) if request.auth != null
     * @allow (update, delete) if request.auth != null
     * @deny (create) if request.auth == null
     * @deny (update, delete) if request.auth == null
     * @principle Allows public reading while restricting modifications to authenticated users.
     */
    match /navigation_menu_items/{itemId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId && resource != null;
  }
}