/**
 * @fileoverview Firestore Security Rules for the CMS Prototype.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing owner-based access control for content creation and modification.
 * Read access is generally public to facilitate content delivery, while write access is restricted to authenticated users,
 * specifically the authors or owners of the content.
 *
 * Data Structure:
 * The Firestore database is structured with top-level collections for major entities like 'pages', 'categories', 'tags', 'posts', and 'media'.
 * 'site_settings' is a singleton document for global configuration. 'widget_areas', 'widget_instances', 'navigation_menus', and 'navigation_menu_items' are also top-level collections.
 *
 * Key Security Decisions:
 * - Public Read Access: Read access (get, list) is generally open to allow content to be displayed to all users.
 * - Owner-Only Writes: Create, update, and delete operations are restricted to the owner (author) of the document.
 * - Ownership Field: Each content document (page, post, media) MUST have an 'authorId' field that matches the authenticated user's UID for write access.
 * - Site Settings Restriction:  Write access to 'site_settings' is denied (for now, can be expanded to role-based access if needed).
 * - No User Listing: There is no explicit user collection, so user listing is not applicable.
 * - Denormalization for Authorization: The rules assume that each document contains an `authorId` field which is used to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read pages, but only the author can create, update, or delete them.
     * @path /pages/{pageId}
     * @allow (get, list): Any user can read page data.
     * @allow (create): User 'hCgWSzB6SFbIi4TUmTPbWor2MYC3' can create a page if request.resource.data.authorId == request.auth.uid.
     * @allow (update, delete): User 'hCgWSzB6SFbIi4TUmTPbWor2MYC3' can update/delete the page if they are the author (resource.data.authorId == request.auth.uid) and the document exists.
     * @deny (create): User 'someOtherUserId' cannot create a page with authorId 'hCgWSzB6SFbIi4TUmTPbWor2MYC3'.
     * @principle Enforces document ownership for writes. Allows public reads.
     */
    match /pages/{pageId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows anyone to read categories, but no one can create, update, or delete them.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category data.
     * @deny (create, update, delete): No one can create, update, or delete categories.
     * @principle Read-only collection for categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read tags, but no one can create, update, or delete them.
     * @path /tags/{tagId}
     * @allow (get, list): Any user can read tag data.
     * @deny (create, update, delete): No one can create, update, or delete tags.
     * @principle Read-only collection for tags.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read posts, but only the author can create, update, or delete them.
     * @path /posts/{postId}
     * @allow (get, list): Any user can read post data.
     * @allow (create): User 'hCgWSzB6SFbIi4TUmTPbWor2MYC3' can create a post if request.resource.data.authorId == request.auth.uid.
     * @allow (update, delete): User 'hCgWSzB6SFbIi4TUmTPbWor2MYC3' can update/delete the post if they are the author (resource.data.authorId == request.auth.uid) and the document exists.
     * @deny (create): User 'someOtherUserId' cannot create a post with authorId 'hCgWSzB6SFbIi4TUmTPbWor2MYC3'.
     * @principle Enforces document ownership for writes. Allows public reads.
     */
    match /posts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows anyone to read media items, but only the author can create, update, or delete them.
     * @path /media/{mediaId}
     * @allow (get, list): Any user can read media item data.
     * @allow (create): User 'hCgWSzB6SFbIi4TUmTPbWor2MYC3' can create a media item if request.resource.data.authorId == request.auth.uid.
     * @allow (update, delete): User 'hCgWSzB6SFbIi4TUmTPbWor2MYC3' can update/delete the media item if they are the author (resource.data.authorId == request.auth.uid) and the document exists.
     * @deny (create): User 'someOtherUserId' cannot create a media item with authorId 'hCgWSzB6SFbIi4TUmTPbWor2MYC3'.
     * @principle Enforces document ownership for writes. Allows public reads.
     */
    match /media/{mediaId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Denies all access to the site settings document.
     * @path /site_settings/config
     * @deny (get, list, create, update, delete): No one can read or write site settings.
     * @principle Restricts access to site settings.
     */
    match /site_settings/config {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read widget areas, but no one can create, update, or delete them.
     * @path /widget_areas/{widgetAreaId}
     * @allow (get, list): Any user can read widget area data.
     * @deny (create, update, delete): No one can create, update, or delete widget areas.
     */
    match /widget_areas/{widgetAreaId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

      /**
     * @description Allows anyone to read widget instances, but no one can create, update, or delete them.
     * @path /widget_instances/{widgetInstanceId}
     * @allow (get, list): Any user can read widget instance data.
     * @deny (create, update, delete): No one can create, update, or delete widget instances.
     */
    match /widget_instances/{widgetInstanceId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

     /**
     * @description Allows anyone to read navigation menus, but no one can create, update, or delete them.
     * @path /navigation_menus/{menuId}
     * @allow (get, list): Any user can read navigation menu data.
     * @deny (create, update, delete): No one can create, update, or delete navigation menus.
     */
    match /navigation_menus/{menuId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read navigation menu items, but no one can create, update, or delete them.
     * @path /navigation_menu_items/{itemId}
     * @allow (get, list): Any user can read navigation menu item data.
     * @deny (create, update, delete): No one can create, update, or delete navigation menu items.
     */
    match /navigation_menu_items/{itemId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }
}