/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a basic security model for a CMS.
 *
 * Core Philosophy:
 * All content (pages, posts, media) is readable by anyone.
 * Only authenticated users can create, update, or delete content.
 * Ownership is enforced on write operations, ensuring only the author can modify their content.
 * Site settings are read-only for all, writes are not permitted to avoid accidental changes.
 *
 * Data Structure:
 * - /pages/{pageId}: Stores static page data.
 * - /categories/{categoryId}: Stores category data.
 * - /tags/{tagId}: Stores tag data.
 * - /posts/{postId}: Stores post data.
 * - /media/{mediaId}: Stores media item data.
 * - /site_settings/config: Stores global site configuration.
 * - /widget_areas/{widgetAreaId}: Stores defined widget areas for themes.
 * - /widget_instances/{widgetInstanceId}: Stores configured instances of widgets within specific areas.
 *
 * Key Security Decisions:
 * - Public read access for all content collections.
 * - Owner-only access for all write operations on content collections.
 * - Site settings are read-only.
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 * - Each content document (Page, Post, MediaItem) contains an `authorId` field, which is used to enforce ownership on write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read pages, but only the author can create, update, or delete them.
     * @path /pages/{pageId}
     * @allow (get, list): Anyone can read page data.
     * @allow (create): Authenticated user can create a page with their authorId.
     * @allow (update, delete): Authenticated user can update or delete a page if they are the author.
     * @deny (create): Non-authenticated user attempts to create a page.
     * @deny (update, delete): Authenticated user attempts to modify or delete a page they didn't create.
     * @principle Enforces document ownership for writes.
     */
    match /pages/{pageId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows anyone to read categories, but only the author can create, update, or delete them.
     * @path /categories/{categoryId}
     * @allow (get, list): Anyone can read category data.
     * @allow (create): Authenticated user can create a category with their authorId.
     * @allow (update, delete): Authenticated user can update or delete a category if they are the author.
     * @deny (create): Non-authenticated user attempts to create a category.
     * @deny (update, delete): Authenticated user attempts to modify or delete a category they didn't create.
     * @principle Enforces document ownership for writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read tags, but only the author can create, update, or delete them.
     * @path /tags/{tagId}
     * @allow (get, list): Anyone can read tag data.
     * @allow (create): Authenticated user can create a tag with their authorId.
     * @allow (update, delete): Authenticated user can update or delete a tag if they are the author.
     * @deny (create): Non-authenticated user attempts to create a tag.
     * @deny (update, delete): Authenticated user attempts to modify or delete a tag they didn't create.
     * @principle Enforces document ownership for writes.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read posts, but only the author can create, update, or delete them.
     * @path /posts/{postId}
     * @allow (get, list): Anyone can read post data.
     * @allow (create): Authenticated user can create a post with their authorId.
     * @allow (update, delete): Authenticated user can update or delete a post if they are the author.
     * @deny (create): Non-authenticated user attempts to create a post.
     * @deny (update, delete): Authenticated user attempts to modify or delete a post they didn't create.
     * @principle Enforces document ownership for writes.
     */
    match /posts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows anyone to read media items, but only the author can create, update, or delete them.
     * @path /media/{mediaId}
     * @allow (get, list): Anyone can read media item data.
     * @allow (create): Authenticated user can create a media item with their authorId.
     * @allow (update, delete): Authenticated user can update or delete a media item if they are the author.
     * @deny (create): Non-authenticated user attempts to create a media item.
     * @deny (update, delete): Authenticated user attempts to modify or delete a media item they didn't create.
     * @principle Enforces document ownership for writes.
     */
    match /media/{mediaId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

     /**
      * @description Allows anyone to read site settings, but no one can modify them.
      * @path /site_settings/config
      * @allow (get): Anyone can read the site settings.
      * @deny (create, update, delete): No one can create, update, or delete site settings.
      * @principle Restricts modification of global configuration.
      */
    match /site_settings/config {
      allow get: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read widget areas, but only authenticated users can create, update, or delete them.
     * @path /widget_areas/{widgetAreaId}
     */
    match /widget_areas/{widgetAreaId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read widget instances, but only authenticated users can create, update, or delete them.
     * @path /widget_instances/{widgetInstanceId}
     */
    match /widget_instances/{widgetInstanceId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(authorId) {
      return request.auth.uid == authorId;
    }

    function isExistingOwner(authorId) {
      return isSignedIn() && isOwner(authorId) && resource != null;
    }
  }
}