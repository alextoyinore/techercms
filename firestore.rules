/**
 * @fileOverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and role-based access control where applicable,
 * while relaxing data validation to enable rapid prototyping.
 *
 * Data Structure:
 * - `/pages/{pageId}`: Stores static page data.
 * - `/categories/{categoryId}`: Stores category data.
 * - `/tags/{tagId}`: Stores tag data.
 * - `/posts/{postId}`: Stores post data.
 * - `/media/{mediaId}`: Stores media data.
 * - `/site_settings/config`: Stores site-wide configuration settings
 *
 * Key Security Decisions:
 * - No user listing is allowed.
 * - Unauthenticated access is disallowed.
 * - Owner-only access is enforced for Pages, Posts, and Media.
 * - Categories and Tags are readable and writable by any signed-in user, but update and delete are denied.
 * - Site Settings are readable by all authenticated users but writable only by an admin role (currently not enforced).
 *
 * Denormalization for Authorization:
 * - The `Page`, `Post`, and `MediaItem` entities include an `authorId` field. This allows for simple ownership checks on pages, posts, and media items without needing to perform additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure page documents.
     * @path /pages/{pageId}
     * @allow (create) Authenticated user can create a page if they are the author.
     * @deny (create) Unauthenticated user cannot create a page.
     * @allow (get, list) Any authenticated user can read any page.
     * @allow (update, delete) Only the author can modify/delete their own pages.
     * @deny (update, delete) Other users cannot modify/delete pages.
     * @principle Enforces document ownership for writes, ensures only the author can modify pages.
     */
    match /pages/{pageId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Secure category documents.
     * @path /categories/{categoryId}
     * @allow (create) Authenticated user can create a category.
     * @deny (create) Unauthenticated user cannot create a category.
     * @allow (get, list) Any authenticated user can read any category.
     * @deny (update, delete) No one can update or delete a category for now.
     * @principle Allows authenticated users to create categories, but restricts updates and deletes.
     */
    match /categories/{categoryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure tag documents.
     * @path /tags/{tagId}
     * @allow (create) Authenticated user can create a tag.
     * @deny (create) Unauthenticated user cannot create a tag.
     * @allow (get, list) Any authenticated user can read any tag.
     * @deny (update, delete) No one can update or delete a tag for now.
     * @principle Allows authenticated users to create tags, but restricts updates and deletes.
     */
    match /tags/{tagId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure post documents.
     * @path /posts/{postId}
     * @allow (create) Authenticated user can create a post if they are the author.
     * @deny (create) Unauthenticated user cannot create a post.
     * @allow (get, list) Any authenticated user can read any post.
     * @allow (update, delete) Only the author can modify/delete their own posts.
     * @deny (update, delete) Other users cannot modify/delete posts.
     * @principle Enforces document ownership for writes, ensures only the author can modify posts.
     */
    match /posts/{postId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Secure media documents.
     * @path /media/{mediaId}
     * @allow (create) Authenticated user can create a media item if they are the author.
     * @deny (create) Unauthenticated user cannot create a media item.
     * @allow (get, list) Any authenticated user can read any media item.
     * @allow (update, delete) Only the author can modify/delete their own media items.
     * @deny (update, delete) Other users cannot modify/delete media items.
     * @principle Enforces document ownership for writes, ensures only the author can modify media items.
     */
    match /media/{mediaId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Secure the site settings document.
     * @path /site_settings/config
     * @allow (get) Any authenticated user can read the site settings.
     * @deny (create, update, delete) No one can create, update, or delete the site settings for now.
     * @principle  Restricts write access to site settings.  Future versions may implement role-based access.
     */
    match /site_settings/config {
      allow get: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId - The user ID to check against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @param {string} authorId - The authorId to check against
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(authorId) {
      return isOwner(authorId) && resource != null;
    }
  }
}