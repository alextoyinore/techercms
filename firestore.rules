
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ======================== Helper Functions ========================

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    /**
     * @description Checks if the user is the owner of an existing document.
     * Also allows access if the document has no owner (for legacy data).
     */
    function isOwnerOrLegacy(doc) {
      return !('authorId' in doc.data) || isOwner(doc.data.authorId);
    }

    /**
     * @description Checks if the current user has the role 'superuser'.
     */
    function isSuperUser() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "superuser";
    }
    
    /**
     * @description Checks if the current user has the role 'writer'.
     */
    function isWriter() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "writer";
    }
    
    /**
     * @description Checks if the user is an authorized content manager (superuser or writer).
     */
    function isContentManager() {
      return isSuperUser() || isWriter();
    }

    // ======================== Collection Rules ========================

    // User Profiles
    match /users/{userId} {
      allow read;
      allow write: if isOwner(userId) || isSuperUser();
    }
    
    // Allows superusers to query all views across all posts for the dashboard
    match /{path=**}/views/{ipAddress} {
      allow get, list: if isSuperUser();
    }
    
    // Allows superusers to query all comments across all posts for the dashboard
    match /{path=**}/comments/{commentId} {
      allow get, list: if isSuperUser();
    }

    // Posts
    match /posts/{postId} {
      allow get, list: if resource == null || resource.data.status == 'published' || isContentManager();
      allow create: if isContentManager() && isOwner(request.resource.data.authorId);
      allow update, delete: if isSuperUser() || (isWriter() && isOwnerOrLegacy(resource));
      
      // Comments Subcollection (for individual post pages)
      match /comments/{commentId} {
        allow read;
        allow create: if isSignedIn() && isOwner(request.resource.data.authorId);
        allow update, delete: if isSuperUser() || (isWriter() && isOwner(resource.data.authorId));
      }
      
      // Likes Subcollection
      match /likes/{userId} {
        allow read;
        allow create, delete: if isOwner(userId);
      }

      // Views Subcollection
      match /views/{ipAddress} {
        allow get, list, create;
        allow update, delete: if false;
      }
    }

    // Pages
    match /pages/{pageId} {
      allow get, list: if resource == null || resource.data.status == 'published' || isContentManager();
      allow create: if isContentManager() && isOwner(request.resource.data.authorId);
      allow update, delete: if isSuperUser() || (isWriter() && isOwnerOrLegacy(resource));
    }

    // Media
    match /media/{mediaId} {
      allow read: if isSignedIn();
      allow create: if isContentManager() && isOwner(request.resource.data.authorId);
      allow update, delete: if isSuperUser() || (isWriter() && isOwnerOrLegacy(resource));
    }
    
    // Categories and Tags
    match /categories/{categoryId} {
      allow read;
      allow write: if isContentManager();
    }
    match /tags/{tagId} {
      allow read;
      allow write: if isContentManager();
    }

    // Custom Themes (user-generated)
    match /custom_themes/{themeId} {
      allow get, list;
      allow create: if isContentManager() && isOwner(request.resource.data.authorId);
      allow update, delete: if isSuperUser() || (isWriter() && isOwnerOrLegacy(resource));
    }
    
    // Site-wide Layout and Widget Configurations
    match /site_settings/config {
      allow read;
      allow write: if isSuperUser();
    }
    match /page_layouts/{pageLayoutId} {
      allow read;
      allow write: if isSuperUser();
    }
     match /block_layouts/{blockLayoutId} {
      allow read;
      allow write: if isContentManager();
    }
    match /widget_areas/{widgetAreaId} {
      allow read;
      allow write: if isSuperUser();
    }
    match /widget_instances/{widgetInstanceId} {
      allow read;
      allow write: if isContentManager();
    }
    
    // Page-specific layout sections
    match /page_sections/{sectionId} {
      allow read;
      allow write: if isContentManager();
    }
    match /section_blocks/{blockId} {
      allow read;
      allow write: if isContentManager();
    }

    // Navigation
    match /navigation_menus/{menuId} {
      allow read;
      allow write: if isSuperUser();
    }
    match /navigation_menu_items/{itemId} {
      allow read;
      allow write: if isSuperUser();
    }

    // Notifications
    match /notifications/{notificationId} {
      allow get, list, update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create, delete: if false;
    }
    
    // Subscriptions
    match /subscriptions/{subscriptionId} {
      // Allow anyone to subscribe.
      allow create;
      // Disallow reading the full list of subscribers or individual emails.
      allow read, update, delete: if false;
    }
  }
}
