/**
 * @fileOverview Firestore Security Rules for the CMS application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access by enforcing strict ownership for user-generated content (Pages, Posts, Media) and restricting access to global site settings.
 *
 * Data Structure:
 * - `/pages/{pageId}`: Stores static page data. Each page is associated with an author.
 * - `/categories/{categoryId}`: Stores category data.
 * - `/tags/{tagId}`: Stores tag data.
 * - `/posts/{postId}`: Stores blog post data. Each post is associated with an author.
 * - `/media/{mediaId}`: Stores media file metadata. Each media item is associated with an author.
 * - `/site_settings/config`: Stores global site configuration (e.g., active theme).
 * - `/widget_areas/{widgetAreaId}`: Stores widget area definitions.
 * - `/widget_instances/{widgetInstanceId}`: Stores widget instance configurations.
 *
 * Key Security Decisions:
 * - Users can only create, update, and delete Pages, Posts, and Media that they own (i.e., where `authorId` matches their UID).
 * - Site settings can be read by anyone but can only be updated or deleted by any authenticated user.
 * - Listing of Pages, Posts, and Media is public.
 * - Categories, Tags, WidgetAreas, and WidgetInstances are managed by any authenticated user.
 *
 * Denormalization for Authorization:
 *  - Each Page, Post, and Media document includes an `authorId` field. This allows for efficient, top-level ownership checks without needing to perform additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to Pages.
     * @path /pages/{pageId}
     * @allow (create) User with UID 'user_abc' can create a new page with authorId: 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update a page where resource.data.authorId == 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete a page where resource.data.authorId == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a page with authorId: 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update a page where resource.data.authorId != 'user_xyz'.
     * @deny (delete) User with UID 'user_xyz' cannot delete a page where resource.data.authorId != 'user_xyz'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /pages/{pageId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Secure access to Categories.
     * @path /categories/{categoryId}
     * @allow (create) Any signed-in user can create a category.
     * @allow (update) Any signed-in user can update a category.
     * @allow (delete) Any signed-in user can delete a category.
     * @deny (create) Unauthenticated user cannot create a category.
     * @principle Allows any authenticated user to manage categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Secure access to Tags.
     * @path /tags/{tagId}
     * @allow (create) Any signed-in user can create a tag.
     * @allow (update) Any signed-in user can update a tag.
     * @allow (delete) Any signed-in user can delete a tag.
     * @deny (create) Unauthenticated user cannot create a tag.
     * @principle Allows any authenticated user to manage tags.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Secure access to Posts.
     * @path /posts/{postId}
     * @allow (create) User with UID 'user_abc' can create a new post with authorId: 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update a post where resource.data.authorId == 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete a post where resource.data.authorId == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a post with authorId: 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update a post where resource.data.authorId != 'user_xyz'.
     * @deny (delete) User with UID 'user_xyz' cannot delete a post where resource.data.authorId != 'user_xyz'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /posts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Secure access to Media Items.
     * @path /media/{mediaId}
     * @allow (create) User with UID 'user_abc' can create a new media item with authorId: 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update a media item where resource.data.authorId == 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete a media item where resource.data.authorId == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a media item with authorId: 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update a media item where resource.data.authorId != 'user_xyz'.
     * @deny (delete) User with UID 'user_xyz' cannot delete a media item where resource.data.authorId != 'user_xyz'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /media/{mediaId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Secure access to Site Settings.
     * @path /site_settings/config
     * @allow (get, list) Any user can read the site settings.
     * @allow (create, update, delete) Only signed-in users can modify site settings.
     * @deny (create, update, delete) Non-signed-in users cannot modify site settings.
     * @principle Restricts modification of site settings to authenticated users.
     */
    match /site_settings/config {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Secure access to Widget Areas.
     * @path /widget_areas/{widgetAreaId}
     * @allow (create) Any signed-in user can create a widget area.
     * @allow (update) Any signed-in user can update a widget area.
     * @allow (delete) Any signed-in user can delete a widget area.
     * @deny (create) Unauthenticated user cannot create a widget area.
     * @principle Allows any authenticated user to manage widget areas.
     */
    match /widget_areas/{widgetAreaId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Secure access to Widget Instances.
     * @path /widget_instances/{widgetInstanceId}
     * @allow (create) Any signed-in user can create a widget instance.
     * @allow (update) Any signed-in user can update a widget instance.
     * @allow (delete) Any signed-in user can delete a widget instance.
     * @deny (create) Unauthenticated user cannot create a widget instance.
     * @principle Allows any authenticated user to manage widget instances.
     */
    match /widget_instances/{widgetInstanceId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}