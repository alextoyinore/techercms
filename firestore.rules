/**
 * @fileoverview Firestore Security Rules for the CMS.
 *
 * Core Philosophy:
 * This ruleset prioritizes ease of use for prototyping. It allows any logged-in user to read all data and create new content.
 * Updates and deletes are restricted to content owners (based on the `authorId` field).
 *
 * Data Structure:
 * - Pages: `/pages/{pageId}`
 * - Categories: `/categories/{categoryId}`
 * - Tags: `/tags/{tagId}`
 * - Posts: `/posts/{postId}`
 * - Media: `/media/{mediaId}`
 * - Site Settings: `/site_settings/config` (single document)
 * - Widget Areas: `/widget_areas/{widgetAreaId}`
 * - Widget Instances: `/widget_instances/{widgetInstanceId}`
 * - Navigation Menus: `/navigation_menus/{menuId}`
 * - Navigation Menu Items: `/navigation_menu_items/{itemId}`
 *
 * Key Security Decisions:
 * - All collections are readable by any logged-in user.
 * - `site_settings/config` is readable by all logged-in users but only updatable if the user is signed in.
 * - Create permissions require a valid user ID (`request.auth.uid`).
 * - Update and Delete permissions enforce ownership via the `authorId` field.
 * - No schema validation is performed beyond ownership checks.
 *
 * Denormalization for Authorization:
 * - The `authorId` field is essential for authorization on Pages, Posts, and Media.
 *   It is validated on create and used to enforce ownership on update and delete.
 *
 * Structural Segregation:
 * - No private user subcollections are used in this ruleset.
 *   All data is stored in top-level collections with appropriate ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants read access to all pages and restricts write access to owners.
     * @path /pages/{pageId}
     * @allow (get, list): Any logged-in user can read page data.
     * @allow (create): Any logged-in user can create a new page, if the `authorId` matches their UID.
     * @allow (update, delete): Only the page author can modify or delete the page.
     * @deny (create): A user attempts to create a page with an `authorId` that does not match their UID.
     * @principle Enforces document ownership for writes.
     */
    match /pages/{pageId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Grants read access to all categories.
     * @path /categories/{categoryId}
     * @allow (get, list): Any logged-in user can read category data.
     * @allow (create): Any logged-in user can create a new category.
     * @principle Open read access, authenticated write access.
     */
    match /categories/{categoryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Grants read access to all tags.
     * @path /tags/{tagId}
     * @allow (get, list): Any logged-in user can read tag data.
     * @allow (create): Any logged-in user can create a new tag.
     * @principle Open read access, authenticated write access.
     */
    match /tags/{tagId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Grants read access to all posts and restricts write access to owners.
     * @path /posts/{postId}
     * @allow (get, list): Any logged-in user can read post data.
     * @allow (create): Any logged-in user can create a new post, if the `authorId` matches their UID.
     * @allow (update, delete): Only the post author can modify or delete the post.
     * @deny (create): A user attempts to create a post with an `authorId` that does not match their UID.
     * @principle Enforces document ownership for writes.
     */
    match /posts/{postId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Grants read access to all media items and restricts write access to owners.
     * @path /media/{mediaId}
     * @allow (get, list): Any logged-in user can read media item data.
     * @allow (create): Any logged-in user can create a new media item, if the `authorId` matches their UID.
     * @allow (update, delete): Only the media item author can modify or delete the media item.
     * @deny (create): A user attempts to create a media item with an `authorId` that does not match their UID.
     * @principle Enforces document ownership for writes.
     */
    match /media/{mediaId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Grants read access to the site settings.
     * @path /site_settings/config
     * @allow (get): Any logged-in user can read the site settings.
     * @allow (update): Any logged-in user can update the site settings.
     * @principle Open read access, authenticated write access.
     */
    match /site_settings/config {
      allow get: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants read access to all widget areas.
     * @path /widget_areas/{widgetAreaId}
     * @allow (get, list): Any logged-in user can read widget area data.
     */
    match /widget_areas/{widgetAreaId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Grants read access to all widget instances.
     * @path /widget_instances/{widgetInstanceId}
     * @allow (get, list): Any logged-in user can read widget instance data.
     */
    match /widget_instances/{widgetInstanceId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Grants read access to all navigation menus.
     * @path /navigation_menus/{menuId}
     * @allow (get, list): Any logged-in user can read navigation menu data.
     */
    match /navigation_menus/{menuId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Grants read access to all navigation menu items.
     * @path /navigation_menu_items/{itemId}
     * @allow (get, list): Any logged-in user can read navigation menu item data.
     */
    match /navigation_menu_items/{itemId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }


    // ======================== Helper Functions ========================

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}