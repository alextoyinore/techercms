/**
 * @fileOverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and role-based access control where applicable,
 * while relaxing data validation to enable rapid prototyping.
 *
 * Data Structure:
 * - `/categories/{categoryId}`: Stores category data.
 * - `/tags/{tagId}`: Stores tag data.
 * - `/posts/{postId}`: Stores post data.
 *
 * Key Security Decisions:
 * - No user listing is allowed.
 * - Unauthenticated access is disallowed, based on the provided reasoning.
 * - Owner-only access is enforced where applicable.
 * - All write operations are secured by authorization checks.
 * - Categories and tags are readable by any signed-in user, but only writable by authorized users (currently, all signed-in users).  Update and Delete operations are denied by default.
 * - Posts are readable by any signed-in user, but only the author can modify them.
 *
 * Denormalization for Authorization:
 * - The `Post` entity includes an `authorId` field. This allows for simple ownership checks on posts without needing to perform additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure category documents.
     * @path /categories/{categoryId}
     * @allow (create) Authenticated user can create a category.
     * @deny (create) Unauthenticated user cannot create a category.
     * @allow (get, list) Any authenticated user can read any category.
     * @deny (update, delete) No one can update or delete a category for now.
     * @principle Enforces document ownership for writes.
     */
    match /categories/{categoryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Secure tag documents.
     * @path /tags/{tagId}
     * @allow (create) Authenticated user can create a tag.
     * @deny (create) Unauthenticated user cannot create a tag.
     * @allow (get, list) Any authenticated user can read any tag.
     * @deny (update, delete) No one can update or delete a tag for now.
     * @principle Enforces document ownership for writes.
     */
    match /tags/{tagId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Secure post documents.
     * @path /posts/{postId}
     * @allow (create) Authenticated user can create a post if they are the author.
     * @deny (create) Unauthenticated user cannot create a post.
     * @allow (get, list) Any authenticated user can read any post.
     * @allow (update, delete) Only the author can modify/delete their own posts.
     * @deny (update, delete) Other users cannot modify/delete posts.
     * @principle Enforces document ownership for writes, ensures only the author can modify posts.
     */
    match /posts/{postId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId - The user ID to check against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @param {string} userId - The user ID to check against.
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}