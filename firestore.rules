/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict author-ownership model for content (Pages, Posts, Media, Custom Themes).
 *
 * Data Structure:
 * - Top-level collections: /pages/{pageId}, /categories/{categoryId}, /tags/{tagId}, /posts/{postId}, /media/{mediaId},
 *   /site_settings/config, /widget_areas/{widgetAreaId}, /widget_instances/{widgetInstanceId},
 *   /navigation_menus/{menuId}, /navigation_menu_items/{itemId}, /custom_themes/{themeId}
 *
 * Key Security Decisions:
 * - Pages, Posts, Media, and Custom Themes are restricted to owner-only writes based on the `authorId` field. Reads are public.
 * - Categories, Tags, Widget Areas, Widget Instances, Navigation Menus and Navigation Menu Items are publicly readable but not writable.
 * - The `site_settings` document is publicly readable but not writable.
 *
 * Denormalization for Authorization:
 * - Pages, Posts, Media, and Custom Themes require an `authorId` field to determine ownership. This is validated on creation and is immutable on update.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(authorId) {
      return isSignedIn() && request.auth.uid == authorId;
    }

    function isExistingOwner(authorId) {
      return isOwner(authorId) && resource != null;
    }

    /**
     * @description Manages access control for static pages, allowing public read access and author-only write access.
     * @path /pages/{pageId}
     * @allow (get, list): Any user can read page data.
     * @allow (create): Authenticated user can create a page if `request.resource.data.authorId` matches their UID.
     * @allow (update, delete): Authenticated user can update/delete a page if they are the original author.
     * @deny (create): Unauthenticated users cannot create pages.
     * @deny (update, delete): Users cannot modify or delete pages authored by others.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /pages/{pageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId) && resource.data.authorId == request.resource.data.authorId;
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows public read access to categories, but denies all write operations.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category data.
     * @deny (create, update, delete): No user can create, update, or delete categories.
     * @principle Read-only collection for public data.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to tags, but denies all write operations.
     * @path /tags/{tagId}
     * @allow (get, list): Any user can read tag data.
     * @deny (create, update, delete): No user can create, update, or delete tags.
     * @principle Read-only collection for public data.
     */
    match /tags/{tagId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access control for posts, allowing public read access and author-only write access.
     * @path /posts/{postId}
     * @allow (get, list): Any user can read post data.
     * @allow (create): Authenticated user can create a post if `request.resource.data.authorId` matches their UID.
     * @allow (update, delete): Authenticated user can update/delete a post if they are the original author.
     * @deny (create): Unauthenticated users cannot create posts.
     * @deny (update, delete): Users cannot modify or delete posts authored by others.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /posts/{postId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId) && resource.data.authorId == request.resource.data.authorId;
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Manages access control for media items, allowing public read access and author-only write access.
     * @path /media/{mediaId}
     * @allow (get, list): Any user can read media item data.
     * @allow (create): Authenticated user can create a media item if `request.resource.data.authorId` matches their UID.
     * @allow (update, delete): Authenticated user can update/delete a media item if they are the original author.
     * @deny (create): Unauthenticated users cannot create media items.
     * @deny (update, delete): Users cannot modify or delete media items authored by others.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /media/{mediaId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId) && resource.data.authorId == request.resource.data.authorId;
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows public read access to site settings, but denies all write operations.
     * @path /site_settings/config
     * @allow (get): Any user can read site settings.
     * @deny (create, update, delete, list): No user can create, update, or delete site settings. List is denied as there will only be one document here.
     * @principle Read-only document for public configuration.
     */
    match /site_settings/config {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to widget areas, but denies all write operations.
     * @path /widget_areas/{widgetAreaId}
     * @allow (get, list): Any user can read widget area data.
     * @deny (create, update, delete): No user can create, update, or delete widget areas.
     * @principle Read-only collection for public data.
     */
    match /widget_areas/{widgetAreaId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to widget instances, but denies all write operations.
     * @path /widget_instances/{widgetInstanceId}
     * @allow (get, list): Any user can read widget instance data.
     * @deny (create, update, delete): No user can create, update, or delete widget instances.
     * @principle Read-only collection for public data.
     */
    match /widget_instances/{widgetInstanceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to navigation menus, but denies all write operations.
     * @path /navigation_menus/{menuId}
     * @allow (get, list): Any user can read navigation menu data.
     * @deny (create, update, delete): No user can create, update, or delete navigation menus.
     * @principle Read-only collection for public data.
     */
    match /navigation_menus/{menuId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to navigation menu items, but denies all write operations.
     * @path /navigation_menu_items/{itemId}
     * @allow (get, list): Any user can read navigation menu item data.
     * @deny (create, update, delete): No user can create, update, or delete navigation menu items.
     * @principle Read-only collection for public data.
     */
    match /navigation_menu_items/{itemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access control for custom themes, allowing public read access and author-only write access.
     * @path /custom_themes/{themeId}
     * @allow (get, list): Any user can read theme data.
     * @allow (create): Authenticated user can create a theme if `request.resource.data.authorId` matches their UID.
     * @allow (update, delete): Authenticated user can update/delete a theme if they are the original author.
     * @deny (create): Unauthenticated users cannot create themes.
     * @deny (update, delete): Users cannot modify or delete themes authored by others.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /custom_themes/{themeId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId) && resource.data.authorId == request.resource.data.authorId;
      allow delete: if isExistingOwner(resource.data.authorId);
    }
  }
}