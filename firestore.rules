/**
 * @fileoverview Firestore Security Rules for the CMS.
 *
 * Core Philosophy:
 * This ruleset enforces a flexible content-authoring model where authenticated users can create, update, and delete their own content. Read access is generally public to enable content consumption. The SiteSettings collection is read-only, intended to be configured via a separate administrative interface outside the scope of these rules.
 *
 * Data Structure:
 * The Firestore database consists of top-level collections for Pages, Categories, Tags, Posts, Media, WidgetAreas, WidgetInstances, NavigationMenus, and NavigationMenuItems. The `site_settings` collection contains a single document named `config`.
 *
 * Key Security Decisions:
 * - Read access is generally public (`allow get, list: if true;`). This simplifies content delivery.
 * - Write access (create, update, delete) is restricted to authenticated users, with ownership enforced via the `authorId` field on documents where applicable.
 * - The `site_settings` document is read-only through these rules. It should be updated via a separate, more secure administrative interface.
 *
 * Denormalization for Authorization:
 * The rules rely on the presence of an `authorId` field within documents to enforce ownership. This avoids the need for complex `get()` operations to determine ownership from related collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to Page documents.
     * @path /pages/{pageId}
     * @allow (get, list): Any user can read a page.
     * @allow (create): An authenticated user can create a page, if the authorId matches their UID.
     * @allow (update, delete): An authenticated user can update or delete a page they own.
     * @deny (create): An unauthenticated user cannot create a page.
     * @deny (update, delete): An authenticated user cannot update or delete a page they don't own.
     * @principle Enforces document ownership for writes.
     */
    match /pages/{pageId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Manages access to Category documents.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read a category.
     * @allow (create): An authenticated user can create a category.
     * @allow (update, delete): An authenticated user can update or delete a category.
     * @deny (create): An unauthenticated user cannot create a category.
     * @deny (update, delete): An unauthenticated user cannot update or delete a category.
     * @principle Allows authenticated users to manage categories.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to Tag documents.
     * @path /tags/{tagId}
     * @allow (get, list): Any user can read a tag.
     * @allow (create): An authenticated user can create a tag.
     * @allow (update, delete): An authenticated user can update or delete a tag.
     * @deny (create): An unauthenticated user cannot create a tag.
     * @deny (update, delete): An unauthenticated user cannot update or delete a tag.
     * @principle Allows authenticated users to manage tags.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to Post documents.
     * @path /posts/{postId}
     * @allow (get, list): Any user can read a post.
     * @allow (create): An authenticated user can create a post if the authorId matches their UID.
     * @allow (update, delete): An authenticated user can update or delete a post they own.
     * @deny (create): An unauthenticated user cannot create a post.
     * @deny (update, delete): An authenticated user cannot update or delete a post they don't own.
     * @principle Enforces document ownership for writes.
     */
    match /posts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Manages access to MediaItem documents.
     * @path /media/{mediaId}
     * @allow (get, list): Any user can read a media item.
     * @allow (create): An authenticated user can create a media item if the authorId matches their UID.
     * @allow (update, delete): An authenticated user can update or delete a media item they own.
     * @deny (create): An unauthenticated user cannot create a media item.
     * @deny (update, delete): An authenticated user cannot update or delete a media item they don't own.
     * @principle Enforces document ownership for writes.
     */
    match /media/{mediaId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Manages access to the SiteSettings document.
     * @path /site_settings/config
     * @allow (get): Any user can read the site settings.
     * @deny (create, update, delete): No user can create, update, or delete the site settings through these rules.
     * @principle Restricts modifications to site settings.
     */
    match /site_settings/config {
      allow get: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages access to WidgetArea documents.
     * @path /widget_areas/{widgetAreaId}
     * @allow (get, list): Any user can read a widget area.
     * @allow (create): An authenticated user can create a widget area.
     * @allow (update, delete): An authenticated user can update or delete a widget area.
     * @deny (create): An unauthenticated user cannot create a widget area.
     * @deny (update, delete): An unauthenticated user cannot update or delete a widget area.
     */
    match /widget_areas/{widgetAreaId} {
       allow get, list: if true;
       allow create: if isSignedIn();
       allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to WidgetInstance documents.
     * @path /widget_instances/{widgetInstanceId}
     * @allow (get, list): Any user can read a widget instance.
     * @allow (create): An authenticated user can create a widget instance.
     * @allow (update, delete): An authenticated user can update or delete a widget instance.
     * @deny (create): An unauthenticated user cannot create a widget instance.
     * @deny (update, delete): An unauthenticated user cannot update or delete a widget instance.
     */
    match /widget_instances/{widgetInstanceId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to NavigationMenu documents.
     * @path /navigation_menus/{menuId}
     * @allow (get, list): Any user can read a navigation menu.
     * @allow (create): An authenticated user can create a navigation menu.
     * @allow (update, delete): An authenticated user can update or delete a navigation menu.
     * @deny (create): An unauthenticated user cannot create a navigation menu.
     * @deny (update, delete): An unauthenticated user cannot update or delete a navigation menu.
     */
    match /navigation_menus/{menuId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to NavigationMenuItem documents.
     * @path /navigation_menu_items/{itemId}
     * @allow (get, list): Any user can read a navigation menu item.
     * @allow (create): An authenticated user can create a navigation menu item.
     * @allow (update, delete): An authenticated user can update or delete a navigation menu item.
     * @deny (create): An unauthenticated user cannot create a navigation menu item.
     * @deny (update, delete): An unauthenticated user cannot update or delete a navigation menu item.
     */
    match /navigation_menu_items/{itemId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document and the document exists.
  function isExistingOwner(userId) {
    return isSignedIn() && request.auth.uid == userId && resource != null;
  }
}