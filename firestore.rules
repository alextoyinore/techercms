
/**
 * @fileoverview Firestore Security Rules for Techer CMS.
 *
 * Core Philosophy:
 * This ruleset establishes a secure, role-based access control system.
 * - Publicly readable content is accessible to anyone.
 * - Write operations (create, update, delete) are restricted to authorized roles.
 * - Ownership is enforced for user-generated content.
 *
 * Roles:
 * - superuser: Can manage all content, settings, and user roles.
 * - writer: Can create and manage their own content.
 * - (Others can be added, e.g., editor, subscriber)
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // ======================== Helper Functions ========================

    /**
     * @description Checks if a user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of a document.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    /**
     * @description Checks if the current user has the role 'superuser'.
     */
    function isSuperuser() {
      return isSignedIn() && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == "superuser";
    }
    
    /**
     * @description Checks if the current user has the role 'writer'.
     */
    function isWriter() {
      return isSignedIn() && get(/databases/$(database)/documents/roles/$(request.auth.uid)).data.role == "writer";
    }

    /**
     * @description Checks if a user is authorized to edit content (superuser or writer).
     */
    function isAuthorizedEditor() {
      return isSuperuser() || isWriter();
    }

    // ======================== Collection Rules ========================

  	// Public user profiles
  	match /users/{userId} {
    	allow read;
      allow write: if isOwner(userId);
    }
    
    // User roles
    match /roles/{userId} {
    	allow get: if isOwner(userId) || isSuperuser();
      allow list, create, update, delete: if isSuperuser();
    }

		// Pages, Posts, and Media Items (Content)
    match /{collection=posts|pages|media}/{docId} {
    	// Allow anyone to read published content, but only authorized editors can read drafts.
      allow get: if resource.data.status == 'published' || isAuthorizedEditor();
      allow list: if isAuthorizedEditor();

      // Only authorized editors can create content, and they must be the author.
      allow create: if isAuthorizedEditor() && isOwner(request.resource.data.authorId);

      // Only the author or a superuser can update/delete.
      allow update, delete: if isAuthorizedEditor() && (isOwner(resource.data.authorId) || isSuperuser());
    }
    
    // Categories and Tags
    match /{collection=categories|tags}/{docId} {
      allow read;
      allow write: if isAuthorizedEditor();
    }
    
    // Custom Themes created by users
    match /custom_themes/{themeId} {
      allow read;
      // Author must be the one creating it.
      allow create: if isAuthorizedEditor() && isOwner(request.resource.data.authorId);
      // Only the author or a superuser can modify/delete.
      allow update, delete: if isAuthorizedEditor() && (isOwner(resource.data.authorId) || isSuperuser());
    }
    
    // Page Builder: Layouts, Sections, and Blocks
    match /{collection=page_layouts|block_layouts|page_sections|section_blocks}/{docId} {
      allow read;
      allow write: if isAuthorizedEditor();
    }
    
    // Site-wide Settings
    match /site_settings/config {
      allow read;
      // Only superusers can change site-wide settings.
      allow write: if isSuperuser();
    }
    
    // Navigation Menus and Items
    match /{collection=navigation_menus|navigation_menu_items}/{docId} {
      allow read;
      allow write: if isSuperuser(); // Typically only admins manage menus.
    }

    // Widget Areas and Instances
    match /{collection=widget_areas|widget_instances}/{docId} {
      allow read;
      allow write: if isAuthorizedEditor();
    }
  }
}
