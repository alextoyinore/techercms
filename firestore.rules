
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to check user roles
    function isSuperuser(userId) {
      return get(/databases/$(database)/documents/roles/$(userId)).data.role == 'superuser';
    }

    function isWriter(userId) {
      let userRole = get(/databases/$(database)/documents/roles/$(userId)).data.role;
      return userRole == 'superuser' || userRole == 'writer';
    }

    // USERS: Public profiles
    match /users/{userId} {
      // Anyone can read public user profiles
      allow read: if true;
      // Only the user themselves can create or update their own profile
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // ROLES: Controls who can do what
    match /roles/{userId} {
      // A user can read their own role
      allow read: if request.auth != null && request.auth.uid == userId;
      // Only superusers can create, update, or delete roles
      allow write: if request.auth != null && isSuperuser(request.auth.uid);
    }
    
    // POSTS: Blog posts or articles
    match /posts/{postId} {
      // Public can read published posts. Writers/Superusers can read any post.
      allow read: if resource.data.status == 'published' || (request.auth != null && isWriter(request.auth.uid));
      // Only writers or superusers can create, update, or delete posts.
      allow write: if request.auth != null && isWriter(request.auth.uid);
    }
    
    // PAGES: Static pages
    match /pages/{pageId} {
       // Public can read published pages. Writers/Superusers can read any page.
      allow read: if resource.data.status == 'published' || (request.auth != null && isWriter(request.auth.uid));
      // Only writers or superusers can create, update, or delete pages.
      allow write: if request.auth != null && isWriter(request.auth.uid);
    }
    
    // CATEGORIES, TAGS: Publicly readable, admin-writable
    match /{collectionName}/{docId} where collectionName in ['categories', 'tags'] {
      allow read: if true;
      allow write: if request.auth != null && isWriter(request.auth.uid);
    }
    
    // MEDIA: All authenticated users can upload and manage their own media
    match /media/{mediaId} {
      allow read: if true;
      // Users can create/delete their own media items
      allow write: if request.auth != null && (request.auth.uid == request.resource.data.authorId || request.auth.uid == resource.data.authorId);
    }
    
    // SITE SETTINGS: Publicly readable, superuser-writable
    match /site_settings/config {
      allow read: if true;
      allow write: if request.auth != null && isSuperuser(request.auth.uid);
    }

    // NAVIGATION: Publicly readable, admin-writable
    match /navigation_menus/{menuId} {
        allow read: if true;
        allow write: if request.auth != null && isWriter(request.auth.uid);
    }
    match /navigation_menu_items/{itemId} {
        allow read: if true;
        allow write: if request.auth != null && isWriter(request.auth.uid);
    }

    // WIDGETS: Publicly readable, admin-writable
    match /widget_areas/{areaId} {
        allow read: if true;
        allow write: if request.auth != null && isWriter(request.auth.uid);
    }
    match /widget_instances/{instanceId} {
        allow read: if true;
        allow write: if request.auth != null && isWriter(request.auth.uid);
    }

    // LAYOUTS & THEMES: Publicly readable, admin-writable
    match /{collectionName}/{docId} where collectionName in ['page_layouts', 'block_layouts', 'custom_themes'] {
      allow read: if true;
      allow write: if request.auth != null && isWriter(request.auth.uid);
    }

    // PAGE BUILDER SECTIONS: Publicly readable, admin-writable
     match /page_sections/{sectionId} {
        allow read: if true;
        allow write: if request.auth != null && isWriter(request.auth.uid);
    }
     match /section_blocks/{blockId} {
        allow read: if true;
        allow write: if request.auth != null && isWriter(request.auth.uid);
    }
  }
}
