/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a public-read, owner-write model for most content, with specific exceptions for site settings.
 *
 * Data Structure:
 * - Top-level collections for `pages`, `categories`, `tags`, `posts`, `media`, `widget_areas`, `widget_instances`, `navigation_menus`, and `navigation_menu_items`.
 * - A single document `site_settings/config` stores global site configuration.
 *
 * Key Security Decisions:
 * - All top-level collections follow a public-read, owner-write pattern.
 * - The `site_settings` document is write-protected.
 * - List operations are generally allowed for all collections.
 * - Data shape is not strictly validated in this prototyping phase.
 *
 * Denormalization for Authorization:
 * - Documents in `pages`, `posts`, and `media` collections MUST contain an `authorId` field to enforce the owner-write pattern.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read pages, but only the author to create, update, or delete them.
     * @path /pages/{pageId}
     * @allow (get, list)
     * @allow (create) if request.auth.uid != null && request.resource.data.authorId == request.auth.uid
     * @allow (update, delete) if request.auth.uid != null && isExistingOwner(resource.data.authorId)
     * @deny (create) if request.auth.uid == null
     * @deny (update, delete) if request.auth.uid == null || request.auth.uid != resource.data.authorId
     * @principle Enforces document ownership for writes.
     */
    match /pages/{pageId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows anyone to read categories, but only the author to create, update, or delete them.
     * @path /categories/{categoryId}
     * @allow (get, list)
     * @allow (create) if request.auth.uid != null
     * @allow (update, delete) if request.auth.uid != null && isExistingOwner(resource.data.authorId)
     * @deny (create) if request.auth.uid == null
     * @deny (update, delete) if request.auth.uid == null || request.auth.uid != resource.data.authorId
     * @principle Enforces document ownership for writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId); // CRITICAL: Assuming categories also have an authorId
    }

    /**
     * @description Allows anyone to read tags, but only the author to create, update, or delete them.
     * @path /tags/{tagId}
     * @allow (get, list)
     * @allow (create) if request.auth.uid != null
     * @allow (update, delete) if request.auth.uid != null && isExistingOwner(resource.data.authorId)
     * @deny (create) if request.auth.uid == null
     * @deny (update, delete) if request.auth.uid == null || request.auth.uid != resource.data.authorId
     * @principle Enforces document ownership for writes.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId); // CRITICAL: Assuming tags also have an authorId
    }

    /**
     * @description Allows anyone to read posts, but only the author to create, update, or delete them.
     * @path /posts/{postId}
     * @allow (get, list)
     * @allow (create) if request.auth.uid != null && request.resource.data.authorId == request.auth.uid
     * @allow (update, delete) if request.auth.uid != null && isExistingOwner(resource.data.authorId)
     * @deny (create) if request.auth.uid == null
     * @deny (update, delete) if request.auth.uid == null || request.auth.uid != resource.data.authorId
     * @principle Enforces document ownership for writes.
     */
    match /posts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows anyone to read media items, but only the author to create, update, or delete them.
     * @path /media/{mediaId}
     * @allow (get, list)
     * @allow (create) if request.auth.uid != null && request.resource.data.authorId == request.auth.uid
     * @allow (update, delete) if request.auth.uid != null && isExistingOwner(resource.data.authorId)
     * @deny (create) if request.auth.uid == null
     * @deny (update, delete) if request.auth.uid == null || request.auth.uid != resource.data.authorId
     * @principle Enforces document ownership for writes.
     */
    match /media/{mediaId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Restricts all write access to site settings.
     * @path /site_settings/config
     * @allow get: if true;
     * @allow list: if false;
     * @deny create, update, delete: if true;
     * @principle Protects global site configuration.
     */
    match /site_settings/config {
      allow get: if true;
      allow list: if false;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read widget areas, but only the author to create, update, or delete them.
     * @path /widget_areas/{widgetAreaId}
     * @allow (get, list)
     * @allow (create) if request.auth.uid != null
     * @allow (update, delete) if request.auth.uid != null && isExistingOwner(resource.data.authorId)
     * @deny (create) if request.auth.uid == null
     * @deny (update, delete) if request.auth.uid == null || request.auth.uid != resource.data.authorId
     * @principle Enforces document ownership for writes.
     */
    match /widget_areas/{widgetAreaId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId); // CRITICAL: Assuming widget_areas also have an authorId
    }

    /**
     * @description Allows anyone to read widget instances, but only the author to create, update, or delete them.
     * @path /widget_instances/{widgetInstanceId}
     * @allow (get, list)
     * @allow (create) if request.auth.uid != null
     * @allow (update, delete) if request.auth.uid != null && isExistingOwner(resource.data.authorId)
     * @deny (create) if request.auth.uid == null
     * @deny (update, delete) if request.auth.uid == null || request.auth.uid != resource.data.authorId
     * @principle Enforces document ownership for writes.
     */
    match /widget_instances/{widgetInstanceId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId); // CRITICAL: Assuming widget_instances also have an authorId
    }

    /**
     * @description Allows anyone to read navigation menus, but only the author to create, update, or delete them.
     * @path /navigation_menus/{menuId}
     * @allow (get, list)
     * @allow (create) if request.auth.uid != null
     * @allow (update, delete) if request.auth.uid != null && isExistingOwner(resource.data.authorId)
     * @deny (create) if request.auth.uid == null
     * @deny (update, delete) if request.auth.uid == null || request.auth.uid != resource.data.authorId
     * @principle Enforces document ownership for writes.
     */
    match /navigation_menus/{menuId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId); // CRITICAL: Assuming navigation_menus also have an authorId
    }

    /**
     * @description Allows anyone to read navigation menu items, but only the author to create, update, or delete them.
     * @path /navigation_menu_items/{itemId}
     * @allow (get, list)
     * @allow (create) if request.auth.uid != null
     * @allow (update, delete) if request.auth.uid != null && isExistingOwner(resource.data.authorId)
     * @deny (create) if request.auth.uid == null
     * @deny (update, delete) if request.auth.uid == null || request.auth.uid != resource.data.authorId
     * @principle Enforces document ownership for writes.
     */
    match /navigation_menu_items/{itemId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId); // CRITICAL: Assuming navigation_menu_items also have an authorId
    }

    //-----------------------------------
    // Helper Functions
    //-----------------------------------

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and if the document exists.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}